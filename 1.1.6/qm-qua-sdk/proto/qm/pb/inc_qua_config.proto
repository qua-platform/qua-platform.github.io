syntax = "proto3";

option java_multiple_files = true;

import "google/protobuf/wrappers.proto";
import "google/protobuf/empty.proto";

package qm.grpc.qua_config;

message QuaConfig {
    oneof config_version {
        // beta suffix means the version is not fixed yet and can changed
        QuaConfigV1 v1beta = 1;
    }
    reserved 2 to 10;
    int32 revision = 11;

    message QuaConfigV1 {
        map<string, ControllerDec> controllers = 2 [deprecated = true];
        map<string, DeviceDec> controlDevices = 20;
        map<string, Oscillator> oscillators = 9;
        map<string, ElementDec> elements = 3;
        map<string, PulseDec> pulses = 4;
        map<string, MixerDec> mixers = 5;
        map<string, WaveformDec> waveforms = 6;
        map<string, DigitalWaveformDec> digitalWaveforms = 7;
        map<string, IntegrationWeightDec> integrationWeights = 8;
        map<string, Octave.Config> octaves = 11;
    }


    message DeviceDec {
        map<uint32, FEMTypes> fems = 1;
    }


    message FEMTypes {
        oneof fem_type_one_of {
            ControllerDec opx = 1;
            OctoDacFemDec octo_dac = 2;
        }
    }

    message ControllerDec {
        string type = 1;
        map<uint32, AnalogOutputPortDec> analogOutputs = 2;
        map<uint32, AnalogInputPortDec> analogInputs = 3;
        map<uint32, DigitalOutputPortDec> digitalOutputs = 4;
        map<uint32, DigitalInputPortDec> digitalInputs = 5;
    }


    message OctoDacFemDec {
        map<uint32, OctoDacAnalogOutputPortDec> analogOutputs = 2;
        map<uint32, AnalogInputPortDec> analogInputs = 3;
        map<uint32, DigitalOutputPortDec> digitalOutputs = 4;
        map<uint32, DigitalInputPortDec> digitalInputs = 5;
    }


    message AnalogOutputPortDec {
        double offset = 1;
        AnalogOutputPortFilter filter = 2;
        uint32 delay = 3;
        map<uint32, double> channelWeights = 4 [deprecated = true];
        bool shareable = 5;
        map<uint32, double> crosstalk = 6;
     }


     message OctoDacAnalogOutputPortDec {
        double offset = 1;
        AnalogOutputPortFilter filter = 2;
        uint32 delay = 3;
        bool shareable = 5;
        map<uint32, double> crosstalk = 6;
        SamplingRate sampling_rate = 7;
        SamplingRateMode upsampling_mode = 8;
        OutputMode output_mode = 9;

        enum OutputMode {
            direct = 0;
            amplified = 1;
        }

        enum SamplingRate {
            Undefined = 0;
            GSPS1 = 1;
            GSPS2 = 2;
        }

        enum SamplingRateMode {
            unset = 0;
            mw = 1;
            pulse = 2;
        }
     }


     message AnalogOutputPortFilter {
         repeated double feedforward = 1;
         repeated double feedback = 2;
    }

    message AnalogInputPortDec {
        double offset = 1;
        google.protobuf.Int32Value gainDb = 2;
        bool shareable = 3;
    }

    message DigitalOutputPortDec {
        bool shareable = 1;
        bool inverted = 2;
    }

    message DigitalInputPortDec {
        uint32 deadtime = 1;
        Polarity polarity = 2;
        double threshold = 3;
        bool shareable = 4;
        enum Polarity {
            RISING = 0;
            FALLING = 1;
        }
    }

    message MixerRef {
        string mixer = 1;
        uint64 loFrequency = 2 [deprecated = true];
        double loFrequencyDouble = 3;
    }

    message Oscillator {
        google.protobuf.Int64Value intermediateFrequency = 1 [deprecated = true];
        MixerRef mixer = 2;
        double intermediateFrequencyDouble = 3;
    }

    message SingleInput {
        DacPortReference port = 1;
    }

    message MixInputs {
        DacPortReference I = 1;
        DacPortReference Q = 2;
        string mixer = 3;
        uint64 loFrequency = 4 [deprecated = true];
        double loFrequencyDouble = 5;
    }

    enum OutputSwitchState {
        unset = 0;
        always_on = 1;
        always_off = 2;
        triggered = 3;
        triggered_reversed = 4;
    }

    message SingleInputCollection {
        map<string, DacPortReference> inputs = 1;
    }

    message MultipleInputs {
        map<string, DacPortReference> inputs = 1;
    }

    message GeneralPortReference {
        string device_name = 1;
        uint32 port = 2;
    }

    message ElementDec {
        map<string, AdcPortReference> outputs = 3;
        map<string, DigitalInputPortReference> digitalInputs = 4;
        map<string, DigitalOutputPortReference> digitalOutputs = 9;
        map<string, GeneralPortReference> RFInputs = 10;
        map<string, GeneralPortReference> RFOutputs = 11;

        oneof element_inputs_one_of {
            SingleInput singleInput = 5;
            MixInputs mixInputs = 6;
            SingleInputCollection singleInputCollection = 50;
            MultipleInputs multipleInputs = 51;
        }

        google.protobuf.UInt32Value timeOfFlight = 7;
        google.protobuf.UInt32Value smearing = 8;

        google.protobuf.UInt64Value intermediateFrequency = 20 [deprecated = true];
        double intermediateFrequencyDouble = 24;
        bool intermediateFrequencyNegative = 23;
        map<string, string> operations = 21;
        google.protobuf.StringValue measurementQe = 22;

        OutputPulseParameters outputPulseParameters = 30;

        HoldOffset holdOffset = 31 [deprecated = true];

        Sticky sticky = 32;

        ElementThread thread = 40;

        oneof oscillator_one_of {
            google.protobuf.Int64Value intermediateFrequencyOscillator = 61 [deprecated = true];
            double intermediateFrequencyOscillatorDouble = 64 [deprecated = true];
            google.protobuf.StringValue namedOscillator = 62;
            google.protobuf.Empty noOscillator = 63;
        }
    }

    message ElementThread {
        string threadName = 1;
    }

    message OutputPulseParameters {
        uint32 threshold = 1 [deprecated = true];
        repeated uint32 table = 2 [deprecated = true];

        enum Polarity {
            ASCENDING = 0;
            DESCENDING = 1;
        }

        int32 signalThreshold = 3;
        Polarity signalPolarity = 4;
        int32 derivativeThreshold = 5;
        Polarity derivativePolarity = 6;

    }

    message HoldOffset{
        int32 duration = 1;
    }

    message Sticky {
        bool analog = 1;
        bool digital = 2;
        int32 duration = 3;
    }

    message DacPortReference {
        string controller = 1;
        uint32 number = 2;
        uint32 fem = 3;
    }

    message AdcPortReference {
        string controller = 1;
        uint32 number = 2;
        uint32 fem = 3;
    }

    message DigitalInputPortReference {
        PortReference port = 1;
        uint32 delay = 2;
        uint32 buffer = 3;
    }

    message DigitalOutputPortReference {
        PortReference port = 1;
    }

    message PortReference {
        string controller = 1;
        uint32 number = 2;
        uint32 fem = 3;
    }

    message PulseDec {
        uint32 length = 2;
        uint32 operation = 3;
        map<string, string> waveforms = 4;
        google.protobuf.StringValue digitalMarker = 5;
        map<string, string> integrationWeights = 8;

        enum Operation {
            MEASUREMENT = 0;
            CONTROL = 1;
        }
    }

    message WaveformDec {
        oneof waveform_oneof {
            ArbitraryWaveformDec arbitrary = 1;
            ConstantWaveformDec constant = 2;
            CompressedWaveformDec compressed = 3 [deprecated = true];
        }
    }

    message ArbitraryWaveformDec {
        repeated double samples = 1;
        double multiplier = 2;
        double deprecatedMaxAllowedError = 3 [deprecated = true];
        google.protobuf.DoubleValue maxAllowedError = 4;
        google.protobuf.DoubleValue samplingRate = 5;
        bool isOverridable = 6;
    }

    message CompressedWaveformDec {
        repeated double samples = 1;
        double sampleRate = 2;
    }

    message ConstantWaveformDec {
        double sample = 1;
        double multiplier = 2;
    }

    message DigitalWaveformDec {
        repeated DigitalWaveformSample samples = 1;
    }

    message DigitalWaveformSample {
        bool value = 1;
        uint32 length = 2;
    }

    message MixerDec {
        repeated CorrectionEntry correction = 1;
    }

    message IntegrationWeightDec {
        repeated IntegrationWeightSample cosine = 1;
        repeated IntegrationWeightSample sine = 2;
    }

    message IntegrationWeightSample {
        double value = 1;
        uint32 length = 2;
    }

    message CorrectionEntry {
        uint64 frequency = 1 [deprecated = true];
        uint64 loFrequency = 2 [deprecated = true];
        Matrix correction = 3;
        bool frequencyNegative = 4;
        double frequencyDouble = 5;
        double loFrequencyDouble = 6;
    }

    message Matrix {
        double v00 = 1;
        double v01 = 2;
        double v10 = 3;
        double v11 = 4;
    }

    message Octave {
        message Config {
            repeated Loopback loopbacks = 1;
            map<uint32, RFOutputConfig> rf_outputs = 2;
            map<uint32, RFInputConfig> rf_inputs = 3;
            IFOutputsConfig if_outputs = 4;
        }

        message Loopback {
            LoopbackInput lo_source_input = 1;
            SynthesizerPort lo_source_generator = 2;
        }

        enum SynthesizerOutputName {
            synth1 = 0;
            synth2 = 1;
            synth3 = 2;
            synth4 = 3;
            synth5 = 4;
        }

        message SynthesizerPort {
            string device_name = 1;
            SynthesizerOutputName port_name = 2;
        }

        enum LOSourceInput {
            not_set = 0;
            internal = 1;
            external = 2;
            analyzer = 3;
        }

        enum LoopbackInput {
            undefined = 0;
            LO1 = 1;
            LO2 = 2;
            LO3 = 3;
            LO4 = 4;
            LO5 = 5;
            Dmd1LO = 6;
            Dmd2LO = 7;
        }

        enum DownconverterRFSource {
            rf_in = 0;
            loopback_1 = 1;
            loopback_2 = 2;
            loopback_3 = 3;
            loopback_4 = 4;
            loopback_5 = 5;
        }

        enum OutputSwitchState {
            unset = 0;
            always_on = 1;
            always_off = 2;
            triggered = 3;
            triggered_reversed = 4;
        }

        enum IFMode {
            direct = 0;
            mixer = 1;
            envelope = 2;
            off = 3;
        }

        message RFOutputConfig {
            double LO_frequency =  1;
            LOSourceInput LO_source = 2;
            OutputSwitchState output_mode = 3;
            float gain = 4;
            bool input_attenuators = 5;
            DacPortReference I_connection = 6;
            DacPortReference Q_connection = 7;
        }

        message RFInputConfig {
            DownconverterRFSource RF_source = 1;
            double LO_frequency =  2;
            LOSourceInput LO_source = 3;
            IFMode IF_mode_I = 4;
            IFMode IF_mode_Q = 5;
        }

        message SingleIFOutputConfig {
            AdcPortReference port = 1;
            string name = 2;
        }

        message IFOutputsConfig {
            SingleIFOutputConfig IF_out1 = 1;
            SingleIFOutputConfig IF_out2 = 2;
        }
    }
}
